{
	"React & TypeScript Function Component": {
		"prefix": "rtfc",
		"body": [
			"// React",
			"import type { FC, ReactElement } from 'react';",
			"import { memo, Fragment } from 'react';",
			"",
			"const ${1:Component}: FC = (): ReactElement => {",
			"    return(",
			"        <Fragment>${2}</Fragment>",
			"    );",
			"};",
			"",
			"",
			"export default memo(${1:Component});"
		],
		"description": "React & TypeScript Function Component"
	},
	"Default Export from Folder": {
		"prefix": "exp-def",
		"body": [
			"export { default as ${1:Component} } from \"${2:./Folder}\";"
		],
		"description": "Default Export from Folder"
	},
	"Export from Folder": {
		"prefix": "exp",
		"body": [
			"export { ${1:Component} } from \"${2:./Folder}\";"
		],
		"description": "Export from Folder"
	},
	"React TypeScript Ref Interface Definition": {
		"prefix": "interface-ref",
		"body": [
			"import type { HTMLProps } from 'react';",
			"",
			"export default interface ${1:InterfaceName} extends HTMLProps<${2:HTMLElement}> {",
			"    ${3}",
			"}"
		],
		"description": "React TypeScript Ref Interface Definition"
	},
	"Create interface with HTMLElement props": {
		"prefix": "interface-element",
		"body": [
			"import type { HTMLProps } from 'react';",
			"",
			"export default interface ${1:Interface} extends HTMLProps<${2:HTMLElement}> {",
			"  ${3}",
			"}"
		],
		"description": "Create interface with HTMLElement props"
	},
	"React TypeScript Function Component with Ref, Styled Component, Interface": {
		"prefix": "rtfc-ref",
		"body": [
			"// React",
			"import type { FC, ReactElement } from 'react';",
			"import { memo, forwardRef } from 'react';",
			"",
			"// Interface",
			"import ${1:Interface} from '${2:./index.d}';",
			"",
			"// Style",
			"import ${3:Styled} from '${4:./styled}';",
			"",
			"const ${5:Component}: FC<${1:Interface}> = forwardRef<${6:HTMLDivElement}, ${1:Interface}>((props, ref): ReactElement<${1:Interface}> => {",
			"    return <${3:Styled} ref={ref} {...props} />",
			"});",
			"",
			"${5:Component}.displayName = \"${5:Component}\";",
			"",
			"export type {",
			"    ${1:Interface}",
			"}",
			"export default memo(${5:Component});"
		],
		"description": "React TypeScript Function Component with Ref, Styled Component, Interface"
	},
	"React & TypeScript Function Component with Styled Component, Interface": {
		"prefix": "rtfc-full",
		"body": [
			"// React",
			"import type { FC, ReactElement } from 'react';",
			"import { memo } from 'react';",
			"",
			"// Interface",
			"import ${1:Interface} from '${2:./index.d}';",
			"",
			"// Styled",
			"import ${3:Styled} from '${4:./styled}';",
			"",
			"const ${5:Component}: FC<${1:Interface}> = ({",
			"    ...rest",
			"}: ${1:Interface}): ReactElement<${1:Interface}> => {",
			"    return(",
			"        <${3:Styled} {...rest} />",
			"    );",
			"};",
			"",
			"export type {",
			"    ${1:Interface}",
			"}",
			"export default memo(${5:Component});"
		],
		"description": "React TypeScript Function Component with Styled Component, Interface"
	},
	"React & TypeScript Function Component with Interface": {
		"prefix": "rtfci",
		"body": [
			"// React",
			"import type { FC, ReactElement } from 'react';",
			"import { memo, Fragment } from 'react';",
			"",
			"// Interface",
			"import ${1:Interface} from './index.d';",
			"",
			"const ${2:Component}: FC<${1:Interface}> = (props: Interface): ReactElement<${1:Interface}> => {",
			"    return(",
			"        <Fragment>${3}</Fragment>",
			"    );",
			"};",
			"",
			"export type {",
			"    ${1:Interface}",
			"}",
			"export default memo(${2:Component});"
		],
		"description": "React & TypeScript Function Component with Interface"
	},
	"interface": {
		"prefix": "interface",
		"body": [
			"import type { ReactNode } from 'react';",
			"",
			"export ${1:default} interface ${2:IInterface} {",
			"  children?: ReactNode;",
			"  ${3}",
			"}"
		],
		"description": "interface"
	},
	"function": {
		"prefix": "fc",
		"body": [
			"const ${1:Function} = (${2:parameter}): ${3:void}  => {",
			"  ${4}",
			"};",
			"",
			"export default ${1:Function};"
		],
		"description": "function"
	},
	"Create pure styled component": {
		"prefix": "styled",
		"body": [
			"import styled, { css } from 'styled-components';",
			"",
			"const Styled = styled.${1:div}(() => {",
			"    return css`${2}`;",
			"});",
			"",
			"export default Styled;"
		],
		"description": "Create pure styled component"
	},
	"Create Styled Component With Interface": {
		"prefix": "styled-interface",
		"body": [
			"import styled, { css } from 'styled-components';",
			"import { ${1:Interface} } from \"${2:.}\";",
			"",
			"const Styled = styled.${3:div}(({",
			"${5}",
			"}: ${1:Interface}) => {",
			"    return css`${6}`;",
			"});",
			"",
			"export default Styled;"
		],
		"description": "Create Styled Component With Interface"
	},
	"Slick Arrow Styled CSS": {
		"prefix": "styled-arrow",
		"body": [
			".slick-arrow {",
			"    position: absolute;",
			"    top: 50%;",
			"    transform: translateY(-50%);",
			"    z-index: 1;",
			"    font-size: ${font.size.large};",
			"",
			"    &.slick-prev {",
			"        left: 0;",
			"    }",
			"",
			"    &.slick-next {",
			"        right: 0;",
			"    }",
			"}"
		],
		"description": "Slick Arrow Styled CSS"
	}
}
